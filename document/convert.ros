#!/bin/sh
#|-*- mode:lisp -*-|#
#| <Put a one-line description here>
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp (ql:quickload '(:cl-ppcre :lem) :silent t)
  )

(defpackage :ros.script.convert.3698998567
  (:use :cl))
(in-package :ros.script.convert.3698998567)

(defun regex-replace (text regex function)
  (let ((regex (ppcre:create-scanner regex)))
    (let ((i 0))
      (with-output-to-string (*standard-output*)
        (loop
          (multiple-value-bind (start end start-regs end-regs) (ppcre:scan regex text :start i)
            (unless start
              (princ (subseq text i))
              (return))
            (princ (subseq text i start))
            (princ (apply function
                          (loop :for start-reg :across start-regs
                                :for end-reg :across end-regs
                                :collect (subseq text start-reg end-reg))))
            (setf i end)))))))

(defun describe-symbol (symbol-name symbol doc-type)
  (with-output-to-string (*standard-output*)
    (format t "* `~A`  ~%  ~A~%"
            (case doc-type
              ((function)
               (let ((arglist (swank/backend:arglist symbol)))
                 (format nil "~(~A~): (~(~{~A~^ ~}~))"
                         symbol-name
                         arglist)))
              ((setf)
               (format nil "(setf ~(~A~)): (~(~{~A~^ ~}~))"
                       symbol-name
                       (swank/backend:arglist `(setf ,symbol))))
              (otherwise
               symbol-name))
            (or (if (eq doc-type 'setf)
                    (documentation `(setf ,symbol) 'function)
                    (documentation symbol doc-type))
                ""))))

(defun convert-markdown (markdown-file output-file)
  (with-open-file (out output-file :direction :output :if-exists :supersede)
    (princ (regex-replace (uiop:read-file-string markdown-file)
                          "\\{(\\S+)\\s+(\\S+)\\}"
                          (lambda (symbol-name type-name)
                            (describe-symbol symbol-name
                                             (read-from-string symbol-name)
                                             (intern (string-upcase type-name)))))
           out)))

(defun main (&rest argv)
  (dolist (a argv)
    (convert-markdown a (make-pathname :name (pathname-name (pathname-name a)) :type "md"))))


;;; vim: set ft=lisp lisp:
