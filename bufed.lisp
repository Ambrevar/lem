(in-package :lem)

(add-command 'unmark-buffer 'unmark-buffer "M-~")
(defun unmark-buffer ()
  (setf (textbuf-modified-p (window-textbuf)) nil)
  t)

(defun set-buffer (textbuf)
  (let ((old-tb (window-textbuf)))
    (setf (textbuf-keep-binfo old-tb)
      (list (window-vtop-linum)
        (window-cur-linum)
        (window-cur-col)
        (window-max-col))))
  (setf (window-textbuf) textbuf)
  (let ((vtop-linum 1)
        (cur-linum 1)
        (cur-col 0)
        (max-col 0))
    (when (textbuf-keep-binfo textbuf)
      (multiple-value-setq (vtop-linum cur-linum cur-col max-col)
        (apply 'values (textbuf-keep-binfo textbuf))))
    (setf (window-vtop-linum) vtop-linum)
    (setf (window-cur-linum) cur-linum)
    (setf (window-cur-col) cur-col)
    (setf (window-max-col) max-col)))

(defun head-line-p (window linum)
  (declare (ignore window))
  (values (<= linum 1) (- 1 linum)))

(defun tail-line-p (window linum)
  (let ((nlines (textbuf-nlines (window-textbuf))))
    (values (<= nlines linum) (- nlines linum))))

(defun bolp ()
  (zerop (window-cur-col)))

(defun eolp ()
  (= (window-cur-col)
     (textbuf-line-length
      (window-textbuf)
      (window-cur-linum))))

(defun bobp ()
  (and (head-line-p *current-window* (window-cur-linum))
       (bolp)))

(defun eobp ()
  (and (tail-line-p
        *current-window*
        (window-cur-linum))
       (eolp)))

(defun insert-char (c arg)
  (arg-repeat (arg)
    (textbuf-insert-char (window-textbuf)
                         (window-cur-linum)
                         (window-cur-col)
                         c)
    (next-char 1))
  t)

(add-command 'insert-newline 'insert-newline "C-j")
(defun insert-newline (arg)
  (arg-repeat (arg)
    (textbuf-insert-newline (window-textbuf)
                            (window-cur-linum)
                            (window-cur-col))
    (next-line 1))
  t)

(add-command 'delete-char 'delete-char "C-d")
(defun delete-char (arg)
  (if (arg-minus-p arg)
    (backward-delete-char (- arg))
    (arg-repeat (arg t)
      (when (textbuf-delete-char
             (window-textbuf)
             (window-cur-linum)
             (window-cur-col))
        (return nil)))))

(add-command 'backward-delete-char 'backward-delete-char "C-h")
(defun backward-delete-char (arg)
  (if (arg-minus-p arg)
    (delete-char (- arg))
    (when (prev-char arg)
      (delete-char arg))))

(defun goto-column (col)
  (setf (window-cur-col) col)
  (setf (window-max-col) col))

(add-command 'beginning-of-line 'beginning-of-line "C-a")
(defun beginning-of-line (arg)
  (declare (ignore arg))
  (goto-column 0))

(add-command 'end-of-line 'end-of-line "C-e")
(defun end-of-line (arg)
  (declare (ignore arg))
  (goto-column (textbuf-line-length
                   (window-textbuf)
                   (window-cur-linum)))
  t)

(defun %buffer-adjust-col (arg)
  (if arg
    (beginning-of-line nil)
    (setf (window-cur-col)
          (min (window-max-col)
               (textbuf-line-length
                (window-textbuf)
                (window-cur-linum))))))

(add-command 'next-line 'next-line "C-n")
(defun next-line (arg)
  (if (arg-minus-p arg)
    (prev-line (- arg))
    (if (arg-repeat (arg t)
          (if (tail-line-p *current-window* (window-cur-linum))
            (return)
            (incf (window-cur-linum))))
      (progn (%buffer-adjust-col arg) t)
      (progn (beginning-of-line nil) t))))

(add-command 'prev-line 'prev-line "C-p")
(defun prev-line (arg)
  (if (arg-minus-p arg)
    (next-line (- arg))
    (if (arg-repeat (arg t)
          (if (head-line-p *current-window* (window-cur-linum))
            (return)
            (decf (window-cur-linum))))
      (progn (%buffer-adjust-col arg) t)
      (progn (beginning-of-line nil) nil))))

(add-command 'next-char 'next-char "C-f")
(defun next-char (arg)
  (if (arg-minus-p arg)
    (prev-char (- arg))
    (arg-repeat (arg t)
      (cond
       ((eobp)
        (return nil))
       ((eolp)
        (next-line 1))
       (t
        (goto-column (1+ (window-cur-col))))))))

(add-command 'prev-char 'prev-char "C-b")
(defun prev-char (arg)
  (if (arg-minus-p arg)
    (next-char (- arg))
    (arg-repeat (arg t)
      (cond
       ((bobp)
        (return nil))
       ((bolp)
        (prev-line 1)
        (end-of-line nil))
       (t
        (goto-column (1- (window-cur-col))))))))
