(in-package :lem)

(export '(*keymaps*
          keymap
          make-keymap
          *global-keymap*
          undefined-key
          define-key
          keyseq-to-string
          find-keybind
          insertion-key-p
          lookup-keybind))

(defvar *keymaps* nil)

(defstruct (keymap (:constructor %make-keymap) (:print-function %print-keymap))
  undef-hook
  parent
  table
  name)

(defun %print-keymap (object stream depth)
  (declare (ignorable depth))
  (print-unreadable-object (object stream :identity t :type t)
    (when (keymap-name object)
      (format stream "~A" (keymap-name object)))))

(defun make-keymap (&key undef-hook parent name)
  (let ((keymap (%make-keymap
                 :undef-hook undef-hook
                 :parent parent
                 :table (make-hash-table :test 'equal)
                 :name name)))
    (push keymap *keymaps*)
    keymap))

(defun define-key (keymap keyspec symbol)
  (check-type symbol symbol)
  (let ((keys (typecase keyspec
                (symbol (loop :for (key1 . keymap1) :in (get keyspec 'keybind)
                              :do (define-key keymap key1 symbol))
                        (return-from define-key))
                (list keyspec)
                (string (parse-key keyspec)))))
    (unless (and (listp keys)
                 (every #'characterp keys))
      (error "define-key: ~s is illegal key" keyspec))
    (pushnew (cons keyspec keymap) (get symbol 'keybind) :test 'equal)
    (define-key-internal keymap keys symbol)))

(defun define-key-internal (keymap keys symbol)
  (loop :with table := (keymap-table keymap)
        :for rest :on keys
        :for k := (car rest)
        :do (cond ((null (cdr rest))
                   (setf (gethash k table) symbol))
                  (t
                   (let ((next (gethash k table)))
                     (if next
                         (setf table next)
                         (let ((new-table (make-hash-table :test 'equal)))
                           (setf (gethash k table) new-table)
                           (setf table new-table))))))))

(defun parse-key (string)
  (labels ((f (string)
             (if (and (>= (length string) 2)
                      (eql (aref string 0) #\M)
                      (eql (aref string 1) #\-))
                 (cons (keyname->keychar "escape") (f (subseq string 2)))
                 (list (keyname->keychar string)))))
    (mapcan #'(lambda (string)
                (if (and (< 4 (length string))
                         (string= string "C-M-" :end1 4))
                    (f (concatenate 'string
                                    "M-C-" (subseq string 4)))
                    (f string)))
            (uiop:split-string string :separator " "))))

(defun keyseq-to-string (kseq)
  (format nil "~{~A~^~}"
          (loop for c- on kseq
                for c = (first c-)
                collect (cond
                          ((char= c (keyname->keychar "escape")) "M")
                          ((keychar->keyname c))
                          (t (format nil "~A" c)))
                collect (cond ((not (cdr c-))"")
                              ((char= c (keyname->keychar "escape")) "-")
                              (t " ")))))

(defun keymap-find-keybind (keymap key)
  (let ((table (keymap-table keymap)))
    (labels ((f (k)
               (let ((cmd (gethash k table)))
                 (if (hash-table-p cmd)
                     (setf table cmd)
                     cmd))))
      (or (etypecase key
            (character
             (f key))
            (list
             (let (cmd)
               (dolist (k key)
                 (unless (setf cmd (f k))
                   (return)))
               cmd)))
          (let ((parent (keymap-parent keymap)))
            (when parent
              (keymap-find-keybind parent key)))
          (keymap-undef-hook keymap)))))

(defun insertion-key-p (kseq)
  (let* ((first-key (elt kseq 0)))
    (when (or (< 31 (char-code first-key))
              (char= first-key
                     (load-time-value (keyname->keychar "C-i"))))
      first-key)))

(defun keymap-flatten-map (keymap fun)
  (labels ((f (table prefix)
             (maphash (lambda (k v)
                        (if (hash-table-p v)
                            (f v (cons k prefix))
                            (funcall fun (reverse (cons k prefix)) v)))
                      table)))
    (f (keymap-table keymap) nil)))

(defvar *global-keymap* (make-keymap :name '*global-keymap*
                                     :undef-hook 'self-insert))

(define-command undefined-key () ()
  (editor-error "Key not found: ~A"
                (keyseq-to-string (last-read-key-sequence))))

(define-key *global-keymap* "C-@" 'undefined-key)
(define-key *global-keymap* "C-a" 'undefined-key)
(define-key *global-keymap* "C-b" 'undefined-key)
;(define-key *global-keymap* "C-c" 'undefined-key)
(define-key *global-keymap* "C-d" 'undefined-key)
(define-key *global-keymap* "C-e" 'undefined-key)
(define-key *global-keymap* "C-f" 'undefined-key)
(define-key *global-keymap* "C-g" 'undefined-key)
(define-key *global-keymap* "C-h" 'undefined-key)
;(define-key *global-keymap* "C-i" 'undefined-key)
(define-key *global-keymap* "C-j" 'undefined-key)
(define-key *global-keymap* "C-k" 'undefined-key)
(define-key *global-keymap* "C-l" 'undefined-key)
(define-key *global-keymap* "C-m" 'undefined-key)
(define-key *global-keymap* "C-n" 'undefined-key)
(define-key *global-keymap* "C-o" 'undefined-key)
(define-key *global-keymap* "C-p" 'undefined-key)
(define-key *global-keymap* "C-q" 'undefined-key)
(define-key *global-keymap* "C-r" 'undefined-key)
(define-key *global-keymap* "C-s" 'undefined-key)
(define-key *global-keymap* "C-t" 'undefined-key)
(define-key *global-keymap* "C-u" 'undefined-key)
(define-key *global-keymap* "C-v" 'undefined-key)
(define-key *global-keymap* "C-w" 'undefined-key)
;(define-key *global-keymap* "C-x" 'undefined-key)
(define-key *global-keymap* "C-y" 'undefined-key)
(define-key *global-keymap* "C-z" 'undefined-key)
;(define-key *global-keymap* "escape" 'undefined-key)
(define-key *global-keymap* "C-\\" 'undefined-key)
(define-key *global-keymap* "C-]" 'undefined-key)
(define-key *global-keymap* "C-^" 'undefined-key)
(define-key *global-keymap* "C-_" 'undefined-key)
;(define-key *global-keymap* "Spc" 'undefined-key)
(define-key *global-keymap* "[del]" 'undefined-key)
(define-key *global-keymap* "[down]" 'undefined-key)
(define-key *global-keymap* "[up]" 'undefined-key)
(define-key *global-keymap* "[left]" 'undefined-key)
(define-key *global-keymap* "[right]" 'undefined-key)
(define-key *global-keymap* "C-down" 'undefined-key)
(define-key *global-keymap* "C-up" 'undefined-key)
(define-key *global-keymap* "C-left" 'undefined-key)
(define-key *global-keymap* "C-right" 'undefined-key)
(define-key *global-keymap* "[home]" 'undefined-key)
(define-key *global-keymap* "[backspace]" 'undefined-key)
(define-key *global-keymap* "[f0]" 'undefined-key)
(define-key *global-keymap* "[f1]" 'undefined-key)
(define-key *global-keymap* "[f2]" 'undefined-key)
(define-key *global-keymap* "[f3]" 'undefined-key)
(define-key *global-keymap* "[f4]" 'undefined-key)
(define-key *global-keymap* "[f5]" 'undefined-key)
(define-key *global-keymap* "[f6]" 'undefined-key)
(define-key *global-keymap* "[f7]" 'undefined-key)
(define-key *global-keymap* "[f8]" 'undefined-key)
(define-key *global-keymap* "[f9]" 'undefined-key)
(define-key *global-keymap* "[f10]" 'undefined-key)
(define-key *global-keymap* "[f11]" 'undefined-key)
(define-key *global-keymap* "[f12]" 'undefined-key)
(define-key *global-keymap* "[dl]" 'undefined-key)
(define-key *global-keymap* "[il]" 'undefined-key)
(define-key *global-keymap* "[dc]" 'undefined-key)
(define-key *global-keymap* "C-dc" 'undefined-key)
(define-key *global-keymap* "[ic]" 'undefined-key)
(define-key *global-keymap* "[eic]" 'undefined-key)
(define-key *global-keymap* "[clear]" 'undefined-key)
(define-key *global-keymap* "[eos]" 'undefined-key)
(define-key *global-keymap* "[eol]" 'undefined-key)
(define-key *global-keymap* "[sf]" 'undefined-key)
(define-key *global-keymap* "[sr]" 'undefined-key)
(define-key *global-keymap* "[npage]" 'undefined-key)
(define-key *global-keymap* "[ppage]" 'undefined-key)
(define-key *global-keymap* "[stab]" 'undefined-key)
(define-key *global-keymap* "[ctab]" 'undefined-key)
(define-key *global-keymap* "[catab]" 'undefined-key)
(define-key *global-keymap* "[enter]" 'undefined-key)
(define-key *global-keymap* "[print]" 'undefined-key)
(define-key *global-keymap* "[ll]" 'undefined-key)
(define-key *global-keymap* "[a1]" 'undefined-key)
(define-key *global-keymap* "[a3]" 'undefined-key)
(define-key *global-keymap* "[b2]" 'undefined-key)
(define-key *global-keymap* "[c1]" 'undefined-key)
(define-key *global-keymap* "[c3]" 'undefined-key)
(define-key *global-keymap* "[btab]" 'undefined-key)
(define-key *global-keymap* "[beg]" 'undefined-key)
(define-key *global-keymap* "[cancel]" 'undefined-key)
(define-key *global-keymap* "[close]" 'undefined-key)
(define-key *global-keymap* "[command]" 'undefined-key)
(define-key *global-keymap* "[copy]" 'undefined-key)
(define-key *global-keymap* "[create]" 'undefined-key)
(define-key *global-keymap* "[end]" 'undefined-key)
(define-key *global-keymap* "[exit]" 'undefined-key)
(define-key *global-keymap* "[find]" 'undefined-key)
(define-key *global-keymap* "[help]" 'undefined-key)
(define-key *global-keymap* "[mark]" 'undefined-key)
(define-key *global-keymap* "[message]" 'undefined-key)
(define-key *global-keymap* "[move]" 'undefined-key)
(define-key *global-keymap* "[next]" 'undefined-key)
(define-key *global-keymap* "[open]" 'undefined-key)
(define-key *global-keymap* "[options]" 'undefined-key)
(define-key *global-keymap* "[previous]" 'undefined-key)
(define-key *global-keymap* "[redo]" 'undefined-key)
(define-key *global-keymap* "[reference]" 'undefined-key)
(define-key *global-keymap* "[refresh]" 'undefined-key)
(define-key *global-keymap* "[replace]" 'undefined-key)
(define-key *global-keymap* "[restart]" 'undefined-key)
(define-key *global-keymap* "[resume]" 'undefined-key)
(define-key *global-keymap* "[save]" 'undefined-key)
(define-key *global-keymap* "[sbeg]" 'undefined-key)
(define-key *global-keymap* "[scancel]" 'undefined-key)
(define-key *global-keymap* "[scommand]" 'undefined-key)
(define-key *global-keymap* "[scopy]" 'undefined-key)
(define-key *global-keymap* "[screate]" 'undefined-key)
(define-key *global-keymap* "[sdc]" 'undefined-key)
(define-key *global-keymap* "[sdl]" 'undefined-key)
(define-key *global-keymap* "[select]" 'undefined-key)
(define-key *global-keymap* "[send]" 'undefined-key)
(define-key *global-keymap* "[seol]" 'undefined-key)
(define-key *global-keymap* "[sexit]" 'undefined-key)
(define-key *global-keymap* "[sfind]" 'undefined-key)
(define-key *global-keymap* "[shelp]" 'undefined-key)
(define-key *global-keymap* "[shome]" 'undefined-key)
(define-key *global-keymap* "[sic]" 'undefined-key)
(define-key *global-keymap* "[sleft]" 'undefined-key)
(define-key *global-keymap* "[smessage]" 'undefined-key)
(define-key *global-keymap* "[smove]" 'undefined-key)
(define-key *global-keymap* "[snext]" 'undefined-key)
(define-key *global-keymap* "[soptions]" 'undefined-key)
(define-key *global-keymap* "[sprevious]" 'undefined-key)
(define-key *global-keymap* "[sprint]" 'undefined-key)
(define-key *global-keymap* "[sredo]" 'undefined-key)
(define-key *global-keymap* "[sreplace]" 'undefined-key)
(define-key *global-keymap* "[sright]" 'undefined-key)
(define-key *global-keymap* "[srsume]" 'undefined-key)
(define-key *global-keymap* "[ssave]" 'undefined-key)
(define-key *global-keymap* "[ssuspend]" 'undefined-key)
(define-key *global-keymap* "[sundo]" 'undefined-key)
(define-key *global-keymap* "[suspend]" 'undefined-key)
(define-key *global-keymap* "[undo]" 'undefined-key)
(define-key *global-keymap* "[mouse]" 'undefined-key)
(define-key *global-keymap* "[resize]" 'undefined-key)
(define-key *global-keymap* "[event]" 'undefined-key)

(defun lookup-keybind (key)
  (flet ((f (list)
           (some (lambda (mode)
                   (when (mode-keymap mode)
                     (keymap-find-keybind (mode-keymap mode) key)))
                 list)))
    (let ((buffer (current-buffer)))
      (or (f (buffer-minor-modes buffer))
          (f *global-minor-mode-list*)
          (keymap-find-keybind (mode-keymap (buffer-major-mode buffer)) key)
          (keymap-find-keybind *global-keymap* key)))))

(defun find-keybind (key)
  (let ((cmd (lookup-keybind key)))
    (when (symbolp cmd)
      (get-command cmd))))

(defun abort-key-p (key)
  (and (characterp key)
       (eq 'keyboard-quit (lookup-keybind key))))
