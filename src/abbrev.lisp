(in-package :cl-user)
(defpackage :lem.abbrev
  (:use :cl :lem)
  (:export :abbrev))
(in-package :lem.abbrev)

(defun preceding-word ()
  (lem::with-marker ((cur (current-marker))
                     (end (current-marker)))
    (skip-chars-backward cur #'syntax-symbol-char-p)
    (lem::points-to-string cur end)))

(defun scan-line-words (str)
  (let ((words))
    (do ((i 0 (1+ i)))
        ((>= i (length str)))
      (when (syntax-symbol-char-p (aref str i))
        (push (subseq str i
                      (do ((j i (1+ j)))
                          ((or (>= j (length str))
                               (not (syntax-symbol-char-p (aref str j))))
                           (setq i j)
                           j)))
              words)))
    (nreverse words)))

(defun scan-buffer-words (buffer word)
  (let ((words))
    (with-open-stream (in (make-buffer-input-stream (lem::buffers-start buffer)))
      (loop :for str := (read-line in nil)
            :while str
            :do (dolist (w (remove-if-not #'(lambda (tok)
                                              (and (string/= word tok)
                                                   (eql 0 (search word tok))))
                                          (scan-line-words str)))
                  (push w words))))
    (nreverse words)))

(defun scan-all-buffer-words (word)
  (remove-duplicates
   (nconc (scan-buffer-words (current-buffer) word)
          (mapcan #'(lambda (buffer)
                      (unless (eq buffer (current-buffer))
                        (scan-buffer-words buffer word)))
                  (buffer-list)))
   :test #'equal))

(define-key *global-keymap* (kbd "C-x /") 'abbrev-with-pop-up-window)
(define-command abbrev-with-pop-up-window () ()
  (let* ((src-word (preceding-word))
         (words (scan-all-buffer-words src-word)))
    (start-completion (lambda (str)
                        (completion str words))
                      src-word)))

(defvar *rest-words* nil)
(defvar *all-words* nil)
(defvar *start-point* nil)

(define-key *global-keymap* (kbd "M-/") 'abbrev)
(define-command abbrev () ()
  (cond ((continue-flag :abbrev)
         (when (null *rest-words*)
           (setf *rest-words* *all-words*))
         (lem::delete-between-points *start-point* (current-marker))
         (insert-string (first *rest-words*))
         (setf *rest-words* (rest *rest-words*)))
        (t
         (let* ((src-word (preceding-word))
                (words (scan-all-buffer-words src-word)))
           (delete-char (- (length src-word)) nil)
           (setf *rest-words* (rest words))
           (setf *all-words* words)
           (setf *start-point* (copy-marker (current-marker) :temporary))
           (insert-string (first words))))))
