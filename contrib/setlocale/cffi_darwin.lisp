(uiop/package:define-package :lem-setlocale/cffi (:use :cl))
(in-package :lem-setlocale/cffi)

;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.12
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant #.(swig-lispify "LC_ALL" 'constant) 0)

(cl:export '#.(swig-lispify "LC_ALL" 'constant))

(cl:defconstant #.(swig-lispify "LC_COLLATE" 'constant) 1)

(cl:export '#.(swig-lispify "LC_COLLATE" 'constant))

(cl:defconstant #.(swig-lispify "LC_CTYPE" 'constant) 2)

(cl:export '#.(swig-lispify "LC_CTYPE" 'constant))

(cl:defconstant #.(swig-lispify "LC_MONETARY" 'constant) 3)

(cl:export '#.(swig-lispify "LC_MONETARY" 'constant))

(cl:defconstant #.(swig-lispify "LC_NUMERIC" 'constant) 4)

(cl:export '#.(swig-lispify "LC_NUMERIC" 'constant))

(cl:defconstant #.(swig-lispify "LC_TIME" 'constant) 5)

(cl:export '#.(swig-lispify "LC_TIME" 'constant))

(cl:defconstant #.(swig-lispify "LC_MESSAGES" 'constant) 6)

(cl:export '#.(swig-lispify "LC_MESSAGES" 'constant))

(cl:defconstant #.(swig-lispify "_LC_LAST" 'constant) 7)

(cl:export '#.(swig-lispify "_LC_LAST" 'constant))

(cffi:defcfun ("setlocale" #.(swig-lispify "setlocale" 'function)) :string
  (arg0 :int)
  (arg1 :string))

(cl:export '#.(swig-lispify "setlocale" 'function))


