(uiop/package:define-package :lem-setlocale/cffi (:use :cl))
(in-package :lem-setlocale/cffi)
;;;don't edit above
;;;don't edit above
;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.12
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant #.(swig-lispify "_LOCALE_H" 'constant) 1)

(cl:export '#.(swig-lispify "_LOCALE_H" 'constant))

(cl:defconstant #.(swig-lispify "LC_CTYPE" 'constant) 0)

(cl:export '#.(swig-lispify "LC_CTYPE" 'constant))

(cl:defconstant #.(swig-lispify "LC_NUMERIC" 'constant) 1)

(cl:export '#.(swig-lispify "LC_NUMERIC" 'constant))

(cl:defconstant #.(swig-lispify "LC_TIME" 'constant) 2)

(cl:export '#.(swig-lispify "LC_TIME" 'constant))

(cl:defconstant #.(swig-lispify "LC_COLLATE" 'constant) 3)

(cl:export '#.(swig-lispify "LC_COLLATE" 'constant))

(cl:defconstant #.(swig-lispify "LC_MONETARY" 'constant) 4)

(cl:export '#.(swig-lispify "LC_MONETARY" 'constant))

(cl:defconstant #.(swig-lispify "LC_MESSAGES" 'constant) 5)

(cl:export '#.(swig-lispify "LC_MESSAGES" 'constant))

(cl:defconstant #.(swig-lispify "LC_ALL" 'constant) 6)

(cl:export '#.(swig-lispify "LC_ALL" 'constant))

(cl:defconstant #.(swig-lispify "LC_PAPER" 'constant) 7)

(cl:export '#.(swig-lispify "LC_PAPER" 'constant))

(cl:defconstant #.(swig-lispify "LC_NAME" 'constant) 8)

(cl:export '#.(swig-lispify "LC_NAME" 'constant))

(cl:defconstant #.(swig-lispify "LC_ADDRESS" 'constant) 9)

(cl:export '#.(swig-lispify "LC_ADDRESS" 'constant))

(cl:defconstant #.(swig-lispify "LC_TELEPHONE" 'constant) 10)

(cl:export '#.(swig-lispify "LC_TELEPHONE" 'constant))

(cl:defconstant #.(swig-lispify "LC_MEASUREMENT" 'constant) 11)

(cl:export '#.(swig-lispify "LC_MEASUREMENT" 'constant))

(cl:defconstant #.(swig-lispify "LC_IDENTIFICATION" 'constant) 12)

(cl:export '#.(swig-lispify "LC_IDENTIFICATION" 'constant))

(cffi:defcstruct #.(swig-lispify "lconv" 'classname)
	(#.(swig-lispify "decimal_point" 'slotname) :string)
	(#.(swig-lispify "thousands_sep" 'slotname) :string)
	(#.(swig-lispify "grouping" 'slotname) :string)
	(#.(swig-lispify "int_curr_symbol" 'slotname) :string)
	(#.(swig-lispify "currency_symbol" 'slotname) :string)
	(#.(swig-lispify "mon_decimal_point" 'slotname) :string)
	(#.(swig-lispify "mon_thousands_sep" 'slotname) :string)
	(#.(swig-lispify "mon_grouping" 'slotname) :string)
	(#.(swig-lispify "positive_sign" 'slotname) :string)
	(#.(swig-lispify "negative_sign" 'slotname) :string)
	(#.(swig-lispify "int_frac_digits" 'slotname) :char)
	(#.(swig-lispify "frac_digits" 'slotname) :char)
	(#.(swig-lispify "p_cs_precedes" 'slotname) :char)
	(#.(swig-lispify "p_sep_by_space" 'slotname) :char)
	(#.(swig-lispify "n_cs_precedes" 'slotname) :char)
	(#.(swig-lispify "n_sep_by_space" 'slotname) :char)
	(#.(swig-lispify "p_sign_posn" 'slotname) :char)
	(#.(swig-lispify "n_sign_posn" 'slotname) :char)
	(#.(swig-lispify "int_p_cs_precedes" 'slotname) :char)
	(#.(swig-lispify "int_p_sep_by_space" 'slotname) :char)
	(#.(swig-lispify "int_n_cs_precedes" 'slotname) :char)
	(#.(swig-lispify "int_n_sep_by_space" 'slotname) :char)
	(#.(swig-lispify "int_p_sign_posn" 'slotname) :char)
	(#.(swig-lispify "int_n_sign_posn" 'slotname) :char))

(cl:export '#.(swig-lispify "lconv" 'classname))

(cl:export '#.(swig-lispify "decimal_point" 'slotname))

(cl:export '#.(swig-lispify "thousands_sep" 'slotname))

(cl:export '#.(swig-lispify "grouping" 'slotname))

(cl:export '#.(swig-lispify "int_curr_symbol" 'slotname))

(cl:export '#.(swig-lispify "currency_symbol" 'slotname))

(cl:export '#.(swig-lispify "mon_decimal_point" 'slotname))

(cl:export '#.(swig-lispify "mon_thousands_sep" 'slotname))

(cl:export '#.(swig-lispify "mon_grouping" 'slotname))

(cl:export '#.(swig-lispify "positive_sign" 'slotname))

(cl:export '#.(swig-lispify "negative_sign" 'slotname))

(cl:export '#.(swig-lispify "int_frac_digits" 'slotname))

(cl:export '#.(swig-lispify "frac_digits" 'slotname))

(cl:export '#.(swig-lispify "p_cs_precedes" 'slotname))

(cl:export '#.(swig-lispify "p_sep_by_space" 'slotname))

(cl:export '#.(swig-lispify "n_cs_precedes" 'slotname))

(cl:export '#.(swig-lispify "n_sep_by_space" 'slotname))

(cl:export '#.(swig-lispify "p_sign_posn" 'slotname))

(cl:export '#.(swig-lispify "n_sign_posn" 'slotname))

(cl:export '#.(swig-lispify "int_p_cs_precedes" 'slotname))

(cl:export '#.(swig-lispify "int_p_sep_by_space" 'slotname))

(cl:export '#.(swig-lispify "int_n_cs_precedes" 'slotname))

(cl:export '#.(swig-lispify "int_n_sep_by_space" 'slotname))

(cl:export '#.(swig-lispify "int_p_sign_posn" 'slotname))

(cl:export '#.(swig-lispify "int_n_sign_posn" 'slotname))

(cffi:defcfun ("setlocale" #.(swig-lispify "setlocale" 'function)) :string
  (__category :int)
  (__locale :string))

(cl:export '#.(swig-lispify "setlocale" 'function))

(cffi:defcfun ("localeconv" #.(swig-lispify "localeconv" 'function)) :pointer)

(cl:export '#.(swig-lispify "localeconv" 'function))

(cffi:defcfun ("newlocale" #.(swig-lispify "newlocale" 'function)) :pointer
  (__category_mask :int)
  (__locale :string)
  (__base :pointer))

(cl:export '#.(swig-lispify "newlocale" 'function))

(cl:defconstant #.(swig-lispify "LC_CTYPE_MASK" 'constant) (cl:ash 1 0))

(cl:export '#.(swig-lispify "LC_CTYPE_MASK" 'constant))

(cl:defconstant #.(swig-lispify "LC_NUMERIC_MASK" 'constant) (cl:ash 1 1))

(cl:export '#.(swig-lispify "LC_NUMERIC_MASK" 'constant))

(cl:defconstant #.(swig-lispify "LC_TIME_MASK" 'constant) (cl:ash 1 2))

(cl:export '#.(swig-lispify "LC_TIME_MASK" 'constant))

(cl:defconstant #.(swig-lispify "LC_COLLATE_MASK" 'constant) (cl:ash 1 3))

(cl:export '#.(swig-lispify "LC_COLLATE_MASK" 'constant))

(cl:defconstant #.(swig-lispify "LC_MONETARY_MASK" 'constant) (cl:ash 1 4))

(cl:export '#.(swig-lispify "LC_MONETARY_MASK" 'constant))

(cl:defconstant #.(swig-lispify "LC_MESSAGES_MASK" 'constant) (cl:ash 1 5))

(cl:export '#.(swig-lispify "LC_MESSAGES_MASK" 'constant))

(cl:defconstant #.(swig-lispify "LC_PAPER_MASK" 'constant) (cl:ash 1 7))

(cl:export '#.(swig-lispify "LC_PAPER_MASK" 'constant))

(cl:defconstant #.(swig-lispify "LC_NAME_MASK" 'constant) (cl:ash 1 8))

(cl:export '#.(swig-lispify "LC_NAME_MASK" 'constant))

(cl:defconstant #.(swig-lispify "LC_ADDRESS_MASK" 'constant) (cl:ash 1 9))

(cl:export '#.(swig-lispify "LC_ADDRESS_MASK" 'constant))

(cl:defconstant #.(swig-lispify "LC_TELEPHONE_MASK" 'constant) (cl:ash 1 10))

(cl:export '#.(swig-lispify "LC_TELEPHONE_MASK" 'constant))

(cl:defconstant #.(swig-lispify "LC_MEASUREMENT_MASK" 'constant) (cl:ash 1 11))

(cl:export '#.(swig-lispify "LC_MEASUREMENT_MASK" 'constant))

(cl:defconstant #.(swig-lispify "LC_IDENTIFICATION_MASK" 'constant) (cl:ash 1 12))

(cl:export '#.(swig-lispify "LC_IDENTIFICATION_MASK" 'constant))

(cl:defconstant #.(swig-lispify "LC_ALL_MASK" 'constant) (cl:logior (cl:ash 1 0) (cl:ash 1 1) (cl:ash 1 2) (cl:ash 1 3) (cl:ash 1 4) (cl:ash 1 5) (cl:ash 1 7) (cl:ash 1 8) (cl:ash 1 9) (cl:ash 1 10) (cl:ash 1 11) (cl:ash 1 12)))

(cl:export '#.(swig-lispify "LC_ALL_MASK" 'constant))

(cffi:defcfun ("duplocale" #.(swig-lispify "duplocale" 'function)) :pointer
  (__dataset :pointer))

(cl:export '#.(swig-lispify "duplocale" 'function))

(cffi:defcfun ("freelocale" #.(swig-lispify "freelocale" 'function)) :void
  (__dataset :pointer))

(cl:export '#.(swig-lispify "freelocale" 'function))

(cffi:defcfun ("uselocale" #.(swig-lispify "uselocale" 'function)) :pointer
  (__dataset :pointer))

(cl:export '#.(swig-lispify "uselocale" 'function))


